The first important thing to notice is the order of rendering elements. The globally valid rule for SVG files is that later elements are rendered atop previous elements. The further down an element is the more it will be visible.
SVG files on the web can be displayed directly in the browser or embedded in HTML files via several methods:
If the HTML is XHTML and is delivered as type application/xhtml+xml, the SVG can be directly embedded in the XML source.
The SVG can also be directly embedded in HTML.
An img element can be used.
The SVG file can be referenced with an object element:
<object data="image.svg" type="image/svg+xml"></object>
Likewise an iframe element can be used:
<iframe src="image.svg"></iframe>
Finally, SVG can be created dynamically with JavaScript and injected into the HTML DOM.


Without further specification, one user unit equals one screen unit. To explicitly change this behavior, there are several possibilities in SVG. We start with the svg root element:

<svg width="100" height="100">…</svg>
The above element defines a simple SVG canvas with 100x100px. One user unit equals one screen unit.

<svg width="200" height="200" viewBox="0 0 100 100">…</svg>
The whole SVG canvas here is 200px by 200px in size. However, the viewBox attribute defines the portion of that canvas to display. These 200x200 pixels display an area that starts at user unit (0,0) and spans 100x100 user units to the right and to the bottom. This effectively zooms in on the 100x100 unit area and enlarges the image to double size.

The <circle> element draws a circle on the screen. It takes three basic parameters to determine the shape and size of the element.

    <circle cx="25" cy="75" r="20"/>
    r
    The radius of the circle.
    
    cx
    The x position of the center of the circle.
    
    cy
    The y position of the center of the circle.

    <rect x="10" y="10" width="30" height="30"/>
<rect x="60" y="10" rx="10" ry="10" width="30" height="30"/>
x
The x position of the top left corner of the rectangle.

y
The y position of the top left corner of the rectangle.

width
The width of the rectangle.

height
The height of the rectangle.

rx
The x radius of the corners of the rectangle.

ry
The y radius of the corners of the rectangle.

<polygon points="50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180"/>
points
A list of points, each number separated by a space, comma, EOL, or a line feed character with additional whitespace permitted. Each point must contain two numbers: an x coordinate and a y coordinate. So, the list (0,0), (1,1), and (2,2) could be written as 0, 0 1, 1 2, 2. The drawing then closes the path, so a final straight line would be drawn from (2,2) to (0,0).

Basic coloring can be done by setting two attributes on the node: fill and stroke. Using fill sets the color inside the object and stroke sets the color of the line drawn around the object. You can use the same CSS color naming schemes that you use in HTML, whether that's color names (that is red), rgb values (that is rgb(255,0,0)), hex values, rgba values, etc.

We have seen in the introducing example that the text element can be used to put arbitrary text in SVG documents:

<text x="10" y="10">Hello World!</text>

An essential part of a text is the font in which it is displayed. SVG offers a set of attributes, many similar to their CSS counterparts, to enable font selection. Each of the following properties can be set as an attribute or via a CSS declaration: font-family, font-style, font-weight, font-variant, font-stretch, font-size, font-size-adjust, kerning, letter-spacing, word-spacing and text-decoration.

